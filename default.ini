[Sensor1]
; Native Raspberry Pi Library
Class = rpiGPIOSensor.rpiGPIOSensor
Pin = 7
Connection = MQTT
Destination = sensor2/topic
PUD = DOWN
Poll = 0.5

[Sensor2]
Class = bluetoothScanner.btSensor
Address = F8:F1:B6:3C:4A:FA
Destination = BluetoothItem
Connection = REST
; Needs to be greater than 1 if using the RSSI mode, 25 if using the LOOKUP mode.
Poll = 2
; Uses signal strength to detect presence of devices
Mode = RSSI
; RSSI - Maximum count for near/far readings
Max = 20
; RSSI - How many near counts before declaring device present
Near = 3
; RSSI - How many far counts before declaring device absent
Far = 15

[Sensor3]
Class = bluetoothScanner.btSensor
Address = E8:E0:A5:2B:39:E9
Connection = MQTT
Destination = sensor4/topic
Poll = 25
Mode = LOOKUP

; Scan for Bluetooth LE devices like an Gigaset G-tag. Scns for presence.
; Does not read any values of the device
[Sensor4]
Class = bluetoothScanner.btSensor
Address = A1:B2:C3:D4:E5:F6
Connection = MQTT
Destination = switch/topic
Mode = BTLE
; How often the values are published. Must be higher than ScanTimeout
Poll = 10
; Scans for x seconds before it validates if the given address is found.
ScanTimeout = 3
; Keyword if the device is found. Could be any value. If option is not set and
; empty the default published value is "ON"
ON = home
; Keyword if the device is NOT found. Could be any value. If option is not set
; and empty the default published value is "OFF"
OFF = away

[Sensor5]
Class = dash.dash
Connection = MQTT
; One Address/Destination pair per button, start with 1, increment numbers
; Mac address
Address1 = 12:34:56:78:90:12
Destination1 = actuators/bounty
Address2 = 21:09:87:65:43:21
Destination2 = actuators/tide
; -1 means this sensor doesn't need to use the main polling thread, it polls on
; its own
Poll = -1

[Sensor6]
Class = rokuAddr.rokuAddr
Type = Roku
Connection = MQTT
Poll = 3600000
; Name is the serial number of the device, located on the label on bottom of device and listed on the Roku website
Name1 = XXXXXXXXXXXX
Destination1 = rokus/bedroom
Name2 = XXXXXXXXXXXX
Destination2 = rokus/den


[Sensor7]
; DHT22 Sensor
Class = DHTSensor.DHTSensor
Sensor = DHT22
Pin = 27
; Either Advanced or Simple
Mode = Advanced
; Round temperature with one digit
PressionTemp = 1
; Round humidity to zero digits
PressionHum = 0
; Select C or F units - defaults to C if not specified
Scale = C
Connection = MQTT
Destination = sensor7/dht22
Poll = 10


[Sensor8]
Class = heartbeat.heartbeat
Type = Heartbeat
Connection = MQTT
Poll = 3600000
; The number of milliseconds sensorReporter has been online is published to this destination
Destination = status/heartbeat

[Sensor9]
; Native Raspberry Pi Library - event handling only
Class = rpiGPIOSensor.rpiGPIOSensor
Pin = 4
Connection = MQTT
Destination = sensor2/topic
PUD = DOWN
; Allows the pin to be initialized to a known state - UP/DOWN defaults to DOWN
InitialState = UP
; EventDetection - RISING/FALLING/BOTH
EventDetection = BOTH
; Optional custom script called when an event occurs
StateCallback = switchLed
; Optional free form args for above script - can identify actuator for example by section name
StateCallbackArgs = Actuator1,Actuator2
Poll = -1

[Actuator1]
Class = rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection = MQTT
Pin = 17
Topic = actuators/actuator1
; When true set the pin to LOW for half a second then set it to HIGH when any message is received 
; on Topic
; Otherwise if the message is "ON" set the pin to HIGH, if the message is "OFF: set the pub to LOW.
Toggle = True
Poll = 0

[Actuator2]
Class = execActuator.execActuator
Type = Exec
; Actuators only support MQTT at this time
; The content of messages are added as arguments to the command
; Use NA for no arguments
; Arguments that include ';', '|', or '\' are ignored
Connection = MQTT
Poll = 0
; Arguments with ';', '|', and '\' will be ignored
Command = /bin/systemctl restart plexmediaserver.service
CMDTopic = scripts/restartplex
; The output string from the command is posted to the below topic.
; If the command returned a non-zero exit code, "ERROR" is published
ResultTopic = scripts/restartplex/results

[Logging]
; If Syslog is NO or not present, File, MaxSize, and NumFiles are required.
; If Syslog is YES then File, MaxSize, and NumFiles are ignored and can be absent.
File = /var/log/mqttReporter.log
MaxSize = 67108864
NumFiles = 10
Syslog = NO
; Valid valuse are CRITICAL, ERROR, WARNING, INFO, DEBUG, and NOTSET. If set to something
; other than these the logger will default to NOTSET.
Level = DEBUG

[Connection1]
Class = mqttConn.mqttConnection
Name = MQTT
User = user
Password = password
Host = host
Port = 1883
Keepalive = 60
; Topic to listen on, when any message is received, the current state of all
; are published to their respective topics.
Topic = sensors/getUpdate
; The MQTT broker will publish the following message on the following topic
; when the client disconnects (cleanly or crashes)
LWT-Topic = status/sensor-reporters
LWT-Msg = mqttReporter is dead
; If TLS is yes the connection will be encrypted, the Certificate is expected to be in
; ./certs/ca.crt"
TLS = NO

[Connection2]
Class = restConn.restConnection
Name = REST
URL = http://localhost:8080/rest/items/

[Connection3]
Name = PinConn
Class = rpiGPIOConn.rpiGPIOConn
Actuator = Actuator1
# First value set pin off and second on. Defaults to OFF,ON
Values = CLOSED,OPEN
